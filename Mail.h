/**
 * Fusion. Wrapper around an email message generation process. After the
 * message has been generated by various functions calls, it may be
 * transmitted to the recipients by way of a popen() call to Exim.
 *
 * Copyright (C) 2005 Andrei Nicholson
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef AN_MAIL_H__
#define AN_MAIL_H__

#include <string>

namespace an
{

class Mail
{
public:
    Mail();
    ~Mail();
    void Send(void);

    void SetPriority(unsigned short int priority);
    void SetFrom(const char* email, const char* name = "");
    void SetTo(const char* email, const char* name = "");
    void SetSubject(const char* subject);

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    inline void SetBody(const char* body)
    {
        m_body = body;
    }

private:
    // Array of the various priority levels available.
    const static char* m_priority_levels[5];

    // The headers and body contents.
    std::string m_headers;
    std::string m_body;

    // Full path to Exim/Sendmail along with any command-line arguments.
    const char* m_smtp_mailer_path;

    // The character set for the entire email (Subject, From, To, body, etc).
    std::string m_charset;

    void SetHeader(const char* header, const char* value);
    void SetFromTo(const char* direction, const char* email, const char* name);
    const char* GetContentTransferEncoding(void);
    void Build(void);

    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    inline const char* GenerateContentType(void)
    {
        std::string content_type("text/plain; charset=");
        content_type += m_charset;

        return content_type.c_str();
    }
};

} // namespace an

#endif // #ifndef AN_MAIL_H__
